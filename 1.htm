<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<title></title>
<link href='./common/style.css' rel='stylesheet'>
</head>
<body>
<hr color='#cccccc' width="100%" size='3'>
<table align='center'>
<tr><td><A href="index.html"><IMG alt=назад src="./common/left.gif" border=0 ></A></td><td><A href="index.html"><IMG alt=оглавление src="./common/ogl.gif" border=0 ></A></td><td><A href="2.htm"><IMG alt=вперёд src="./common/right.gif" border=0 ></A></td><td><img src='./common/back.png'/></td></tr>
</table>
<hr color='#cccccc' width="100%" size='3'>
<h2 style="TEXT-ALIGN: center">1. Введение в работу с файлами в ОС Linux</h2>
<p>

 <span class='theme'>Создание файлов</span>
 </p>
<P>В ходе текущего урока нам будет необходимо создавать файлы, изменять конфигурационные файлы программ, а также копировать и перемещать некую информацию, хранящуюся в определенных файлах. Ввиду этого изучим базовые возможности работы с файлами, которые позволят нам совершать вышеперечисленные операции.</P>
<P>Для начала создадим файл:
</P>
<P>
<img src="img/211.png" width="502" height="146" border="0" alt="">
</P>
<P>Таким образом, с помощью команды <b>touch</b>, мы создали файл, полный адрес которого таков: <b>/home/student/step/1.txt</b>. Стоит отметить, что расширение в данном случае не играет какой-либо серьёзной роли. И если в графической оболочке по расширению система принимает решение о том, что ей необходимо сделать с определённым файлом при его запуске, то в текстовом режиме расширение как таковое никак системой не используется. Однако присваивая определённое расширению файлу, мы, таким образом, сигнализируем какого рода информация там хранится, но сигнализируем исключительно для себя и наших последователей.</P>
<P>Для редактирования такого файла, на первых порах освоеaaaния Linux удобней всего пользоваться файловым менеджером Midnight Commander, разговор о котором пойдёт в следующей части данного занятия. Пока отметим, что распространённые текстовые редакторы Unix систем не отличаются "дружелюбностью" для Windows пользователей, поэтому их некоторая необычность может очень сильно отпугнуть новичка от Unix систем в принципе. Поэтому рассмотрим пока лишь механизмы добавления информации в файл, без использования каких-либо редакторов в принципе.</P>
<P>Для просмотра файла используется коман1да <b>cat</b>:</P>
<P><img src="img/212.png" width="502" height="156" border="0" alt=""></P>
<P>И снова создалось впечатление, что система не отреагировала на наш "запрос". Однако, с системой "всё в порядке". Просто наш файл, который только что был нами создан, пуст. Для того, чтобы поместить в него какую-либо информацию, познакомимся с командой <b>echo</b> которая всего-лишь выводит на экран то сообщение, которое мы указываем в аргументах данной команды:</P>
<P><img src="img/213.png" width="544" height="216" border="0" alt=""></P>
<P>При первом использовании команды <b>echo</b> на экран вывелось сообщение "Привет! Как дела?". Затем, введя ту же самую команду (пользуйтесь стрелкой курсора "вверх"!), мы её дополнили двумя знаками "больше" и именем файла, созданного нами перед этим. (Обращаю Ваше внимание на то, чтобы Вы при самостоятельной работе соблюдали тот синтаксис команд, который представлен в листинге, вплоть до символов "пробел"!) После этого, при попытке просмотра файла, нам высветилось вновь наше приветствие: "Привет! Как дела?" Это означает, что данная фраза является содержимым файла 1.txt! В указанном примере двойной знак "больше" выступил в роли приказа системе выводить указанное сообщение не на экран, а туда, куда эти символы указывают >> в файл 1.txt! Проверим, что произойдет с файлом, если мы добавим в него  ещё какую-нибудь информацию, а так же попробуем провести ту же самую операцию, что и выше, но с использованием одного знака "больше": </P>
<P><img src="img/214.png" width="640" height="320" border="0" alt=""></P>
<P>Фраза "Здравствуй! Дела просто отлично!" благополучно была добавлена к концу файла, при этом информация, которая на тот момент содержалась в файле 1.txt не была изменена. Однако, при попытке помещения фразы "Как учеба? Нравится?", произошла замена уже существующей информации  на указанную нами. "Виной" тому <b>один</b> символ "больше". Таким образом, мы создали файл 1.txt заново. Попробуем данным способом создать ещё несколько файлов, используя как один, так и двойной символ "больше". </P>
<P><img src="img/215.png" width="598" height="468" border="0" alt=""></P>
<P>Таким образом, какое бы мы ни указывали количество символов "больше" (но не больше двух), в случае, если файла, указанного как "приемник" информации от команды <b>echo</b>, не существует - он будет создан! В случае, если данный файл уже существует и мы указываем <b>один</b> символ "больше" - файл будет создан заново. И если мы указываем два знака "больше" - информация добавляется к концу файла. Эти механизмы очень помогают системным администраторам, когда необходимо поместить в какой-либо файл 0 или 1 (по аналогии есть "галочка" и нет). Одна команда - и "галочка" поставлена! Одна команда - и убрана. Но это пока в будущем. Пока же Вам придется тренироваться лишь на "Привет Как дела?"</P>
<p>
 <span class='theme'>Копирование и перемещение файлов</span>
 </p>
<P>Копирование файлов и каталогов осуществляется командой <b>cp</b> (<b>c</b>o<b>p</b>y). Формат команды таков: <b>cp</b> [пробел] <b>что копируем</b> [пробел] <b>куда копируем</b>. В аргументах <b>что копируем</b> и <b>куда копируем</b> возможно использование как абсолютных, таки относительных адресов. Используя только что созданные файлы, попробуем скопировать в папки <b>1</b> и <b>2</b>, которые предварительно создадим:</P>
<P><img src="img/216.png" width="500" height="226" border="0" alt=""></P>
<P>Командами <b>ls 1</b> и <b>ls 2</b> просматриваем содержимое каталога <b>1</b> и <b>2</b> соответственно.</P>
<P>Попробуем воспользоваться абсолютными адресами и масками (шаблонами):</P>
<P><img src="img/217.png" width="498" height="310" border="0" alt=""></P>
<P>Командой <b>cp /home/student/step/*.txt 3</b> мы скопировали все файлы, находящиеся в каталоге <b>/home/student/step</b> и имя которых заканчивается на <b>*.txt</b> в каталог под именем <b>3</b>, который мы предварительно создали.
</P>
<P>Перемещение файлов и каталогов осуществляется с помощью команды <b>mv</b> (<b>m</b>o<b>v</b>e). Формат команды аналогичен команде копирования.</P>
<P><img src="img/218.png" width="498" height="370" border="0" alt=""></P>
<P>Командой <b>mv 3/3.txt 2</b> мы, находясь в каталоге <b>step</b> , перемещаем из каталога <b>3</b> , находящегося в текущем каталоге, файл <b>3.txt</b> в каталог <b>2</b> , находящийся в текущем каталоге. Обратите внимание на то, что если указать точно такую же команду, но в каталоге <b>student</b> , команда  будет выполнена, над теми папками <b>1</b> и <b>2</b> , которые находятся в каталоге <b>student</b>.</P>
<P>Копирование каталогов осуществляется аналогично копированию файлов, с той лишь разницей, что нам необходимо указать ключ <b>R</b> или <b>r</b>, которые указывают на то, что операцию копирования необходимо проводить рекурсивно - со всем содержимым каталогов в том числе:</P>
<P><img src="img/219.png" width="494" height="482" border="0" alt=""></P>
<P>Таким образом, мы скопировали каталоги <b>1</b> и <b>2</b> со всем их содержимым в каталог <b>3</b>. Перемещение каталогов происходит аналогично перемещению файлов:</P>
<P><img src="img/2110.png" width="500" height="584" border="0" alt=""></P>
<P>Таким образом, мы переместили каталог <b>3</b> со всем своим содержимым в каталог 123 <b>2</b>, при этом каталоги <b>3</b> и <b>2</b> находились в каталоге <b>step</b>.</P>
<P></P>

<hr color='#cccccc' width="100%" size='3'>
<table align='center'>
<tr><td><A href="index.html"><IMG alt=назад src="./common/left.gif" border=0 ></A></td><td><A href="index.html"><IMG alt=оглавление src="./common/ogl.gif" border=0 ></A></td><td><A href="2.htm"><IMG alt=вперёд src="./common/right.gif" border=0 ></A></td>td><img src='./common/back.png'/></td></tr>
</table>
<hr color='#cccccc' width="100%" size='3'>
</body>
</html>
